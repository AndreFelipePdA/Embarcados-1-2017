Data: 14/03/2017

Para todas as questões, compile-as com o gcc e execute-as via terminal.

1. Crie um "Olá mundo!" em C.
	Terminal:
		$ gedit ola_mundo.c	
	
	Programa: 
	
		#include<stdio.h>
		
		int main(){
			printf("\t Ola munado!\n");
			return 0;
		}

	Terminal:
		$ gcc ola_mundo.c
		$ ./a.out
		Ola mundo!
					 
	

2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
	$ ./ola_usuario_1
	$ Digite o seu nome: Eu
	$ Ola Eu
	$
	
	Terminal:
	
	$ gedit Ola_usuario.c
	
	Programa:

		#include<stdio.h>
		
		int main (){
			char nome[50]; // vetor de entrada para char
			printf (" Digite o seu nome:\n\t");
			scanf("%s", nome);
			printf("\n Ola usuario: %s" nome);
			return 0;
		}

	Terminal:
		
		$ gcc Ola_usuario.c
		$ ./a.out
		$ Digite o seu nome:
		$	Andre
		$ Ola Andre
	

3. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ Digite o seu nome: 
		$	Andre Felipe
		$ Ola Andre

	(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:
		$ Digite o seu nome: 
		$	"Andre Felipe"
		$ Ola Andre

	(c) Se é usado um pipe. Por exemplo:
		$ echo Andre | ./a.out 
		$ Ola Andre

	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Andre Felipe | ./a.out 
		$ Ola Andre
 
	(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:
		$ echo "Andre Felipe" | ./a.out 
		$ Ola Andre

	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./a.out  < ola.txt
		$ Ola mundo

4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
	
	$ gedit ola_usuario_2.c
	
	Programa:
		
		# include <stdio.h>
		
		int main(int arcg, char *argv[]) {
			printf("Ola %s", argv[1]); // argv recebe a string antes do código 
			returne 0;
		}
	
	Terminal
		$ gcc ola_usuario_2.c
		$ ./a.out Andre
		$ Ola Andre
		

5. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./a.out Andre
		$ Ola Andre
	(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:
		$ ./a.out  "Andre"
		$ Ola Andre
	(c) Se é usado um pipe. Por exemplo:
		$ echo Andre | ./a.out
		$ Ola (null)
	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Andre | ./a.out
		$ Ola (null)
		
	(e) Se é usado um pipe com mais de um nome entre aspas. Por exemplo:
		$ echo "Andre" | ./a.out
		$ Ola (null)
		
	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo mundo cruel! > ola.txt
		$ ./a.out < ola.txt
		$ Ola (null)

6. Crie um código em C que faz o mesmo que o código da questão 4,
   e em seguida imprime no terminal quantos valores de entrada foram 
   fornecidos pelo usuário. Por exemplo, considerando que o código criado 
   recebeu o nome de 'ola_usuario_3':

	$ gedit ola_usuario_3.c

	Programa:
		
		#include <stdio.h>

		int main (argc, char *argv[]){
			
			printf("Ola %s\n Numero de entradas = %d", argv[1], argc);
			return 0;
		}
	Terminal:
	
	$gcc ola_usuario_3.c
	$./a.out eu
	$Ola eu
	$Numero de entradas = 2
	

7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. 
	Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':
	$ gedit ola_usuario_4.c

	Programa:

		#include <stdio.h>
		
		int main ( int argc, char *argv[]){
		
			int i;
			printf("Agumentos: ");
			for  (i=1; argc;1++){
		 		printf("%s ",argv[i];}
			return 0;	
		}
	
		Terminal?
		$ gcc ola_usuario_4.c
		$./a.out Oi Andre
		$Argumentos: Oi Andre
		
		Há dois argumento, duas palavras.
			
8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo:

	int Num_Caracs(char *string);

Salve-a em um arquivo separado chamado 'num_caracs.c'.
Salve o protótipo em um arquivo chamado 'num_caracs.h'. 
Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.

	$ gedit num_caracs.c
	
	Programa 
	
	#include <stdio.h>
	
	int Num_Caracs( char *string){
		
		int i=0;
		while(string[i] !='\0') i++;
		return i;	
	}
	
	Terminal:
	
	$gcc -c num_caracs.c

9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada 
   argumento de entrada e a quantidade de caracteres de cada um desses argumentos.
   Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':
	
	
	$ gedit num_caracs2.c
	
	Programa: 
	
	# include<stdio.h>
		

	int main ( int argc, char *argv[]){
	
		int i;
		for (i=o; i<argc; i++)
		 	printf("Argumentos: %s \n Numero de caracteres: %d \n", argv[i], Num_Caracs(argv[i]));
		return 0; 
	}

	Terminal: 
	$ gcc num_caracs2.c num_caracs.o 
	$./a.out Andre Felipe Pereira
	Argumento: ./a.out 
	Numero de caracteres: 7
	Argumento: Andre  
	Numero de caracteres: 5
	Argumento: Felipe  
	Numero de caracteres: 6
	Argumento: Pereira
	Numero de caracteres: 7
	


10. Crie um Makefile para a questão anterior.

	Makefile:
	
	num_caracs:
		
		$ gcc -c num_caracs.c
		$ gcc num_caracs2.c num_caracs.o
		$ ./a.out Andre Felipe Pereira 
		
	terminal:
	
	$make num_caracs
	Argumento: ./a.out 
	Numero de caracteres: 7
	Argumento: Andre  
	Numero de caracteres: 5
	Argumento: Felipe  
	Numero de caracteres: 6
	Argumento: Pereira
	Numero de caracteres: 7

11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total 
    de caracteres nos argumentos de entrada. Por exemplo, considerando que o código 
    criado recebeu o nome de 'ola_num_caracs_2':
	
	$ gedit ola_num_caracs_2
	
	Programa:
	
	#include<stdio.h>
	
	int main( int argc, char *argv[]){
	
		int i, tot= 0;
		for (i=0; i<argc; i++){
			tot+= Num_Caracs(argv[i])}
		printf("Total de carcteres: %d", tot);
		retorn 0;
	}
	
	
	Terminal;
	
	$gcc ola_num_caracs_2.c num_caracs.o
	$./a.out Andre Felipe Pereira
	 Total de caracteres de entrada: 25	
		

12. Crie um Makefile para a questão anterior.
	Makefile:
	
	num_caracs:
		gcc -c num_caracs.c
		gcc ola_num_caracs2.c num_caracs.o
		./a.out Andre Felipe Pereira 
		
	terminal:
	$make num_caracs
	$Total de caracteres de entrada: 25
	